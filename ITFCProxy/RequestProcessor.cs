//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ITFCProxy
{
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExecutionStatus", Namespace="http://schemas.datacontract.org/2004/07/Fleury.Sistemas.TI.ITFC.Base")]
    public enum ExecutionStatus : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotExecuted = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TechnicalError = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BusinessError = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://itfc.fleury.com.br/ProcessorService", ConfigurationName="ITFCProxy.IRequestProcessor")]
    public interface IRequestProcessor
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://itfc.fleury.com.br/ProcessorService/IRequestProcessor/ExecuteStep", ReplyAction="http://itfc.fleury.com.br/ProcessorService/IRequestProcessor/ExecuteStepResponse")]
        ITFCProxy.ExecutionStatus ExecuteStep(System.Guid activityId, string interfaceName, string stepName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://itfc.fleury.com.br/ProcessorService/IRequestProcessor/ExecuteStep", ReplyAction="http://itfc.fleury.com.br/ProcessorService/IRequestProcessor/ExecuteStepResponse")]
        System.Threading.Tasks.Task<ITFCProxy.ExecutionStatus> ExecuteStepAsync(System.Guid activityId, string interfaceName, string stepName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRequestProcessorChannel : ITFCProxy.IRequestProcessor, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RequestProcessorClient : System.ServiceModel.ClientBase<ITFCProxy.IRequestProcessor>, ITFCProxy.IRequestProcessor
    {
        
        public RequestProcessorClient()
        {
        }
        
        public RequestProcessorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName)
        {
        }
        
        public RequestProcessorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public RequestProcessorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public RequestProcessorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public ITFCProxy.ExecutionStatus ExecuteStep(System.Guid activityId, string interfaceName, string stepName)
        {
            return base.Channel.ExecuteStep(activityId, interfaceName, stepName);
        }
        
        public System.Threading.Tasks.Task<ITFCProxy.ExecutionStatus> ExecuteStepAsync(System.Guid activityId, string interfaceName, string stepName)
        {
            return base.Channel.ExecuteStepAsync(activityId, interfaceName, stepName);
        }
    }
}
